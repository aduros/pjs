#!/usr/bin/env node

// Disable strict mode
// "use strict";

const fs = require("fs");
const cli = require("../lib/cli");

const program = cli().action(async (script, files, options) => {
    if (options.file != null) {
        if (script != null) {
            // When using -f, assume script was an input file name
            files.unshift(script);
        }
        script = fs.readFileSync(options.file == "-" ? 0 : options.file, "utf8");

        // Trim shebang
        if (script.charAt(0) == "#") {
            const idx = script.indexOf("\n");
            script = script.substring(idx);
        }
    }

    // Must include at least one script
    if (options.before == null && script == null && options.after == null) {
        program.help({error: true});
    }

    const generate = require("../lib/generate");
    var generated;
    try {
        let mode, markupSelector;
        if (options.csv || options.csvHeader) {
            mode = "csv";
        } else if (options.json != null) {
            mode = "json";
        } else if (options.html != null) {
            mode = "html";
            markupSelector = options.html;
        } else if (options.xml != null) {
            mode = "xml";
            markupSelector = options.xml;
        }

        generated = generate({
            mode,
            beforeJs: options.before ? options.before.join("\n;") : null,
            lineJs: script,
            afterJs: options.after ? options.after.join("\n;") : null,
            inputStream: options.explain ? null : "__inputStream",

            textDelimiter: (options.delimiter != null) ? new RegExp(options.delimiter) : null,
            csvHeader: options.csvHeader,
            jsonFilter: options.json,
            markupSelector: markupSelector,
        });

    } catch (error) {
        if (process.env.PJS_DEBUG) {
            console.error(error);
        } else {
            console.error("Parse error: "+error.message);
        }
        process.exit(1);
    }
    if (options.explain) {
        process.stdout.write(generated);
    } else {
        process.stdout.on("error", error => {
            // Ignore errors about closed pipes
        });

        const pjsModule = require("..");
        function customRequire (name) {
            // Override require() in order to always locate pjs-tool
            if (name == "pjs-tool") {
                return pjsModule;
            }

            // The original untouched require()
            const requireFn = (typeof __non_webpack_require__ != "undefined")
                ? __non_webpack_require__
                : require;

            // Transform to resolve relative to the current directory
            name = requireFn.resolve(name, {paths: [process.cwd()]});

            return requireFn(name);
        }

        const fn = new Function("__inputStream", "FILENAME", "require", "return " + generated);
        async function invokeFn (inputStream, filename) {
            try {
                await fn(inputStream, filename, customRequire);
            } catch (error) {
                console.error("An error occurred when running your script. Consider using --explain to help debug.\n");
                console.error(error);
                process.exit(1);
            }
        }

        if (files.length > 0) {
            // Run on each file sequentially
            for (const file of files) {
                if (file == "-") {
                    // Special case where passed filename was "-"
                    await invokeFn(process.stdin, null);
                } else {
                    await invokeFn(fs.createReadStream(file), file);
                }
            }
        } else {
            // Run on stdin
            await invokeFn(process.stdin, null);
        }
    }
});

program.parse();
